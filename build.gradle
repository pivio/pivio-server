buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.springframework:springloaded:1.2.8.RELEASE'
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'jacoco'
    id 'java'
    id 'idea'
    id 'org.sonarqube' version '2.6.1'
    id 'org.springframework.boot' version '1.5.10.RELEASE'
}

clean {
    delete 'data'
}

license {
    ignoreFailures true
    header = file('LICENSE')
}

jar {
    baseName = 'pivio-server'
    version = '1.1.0'
}

repositories {
    jcenter()
}

dependencies {
    compile 'com.flipkart.zjsonpatch:zjsonpatch:0.4.8'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.elasticsearch.plugin:delete-by-query:2.4.6'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    compile 'org.springframework.boot:spring-boot-starter-web'

    testCompile 'com.jayway.jsonpath:json-path'
    testCompile 'org.apache.commons:commons-text:1.2'
    testCompile 'org.assertj:assertj-core:3.9.0'
    testCompile 'org.awaitility:awaitility:3.0.0'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.testcontainers:testcontainers:1.5.1'
}

// see https://github.com/ben-manes/gradle-versions-plugin
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5'
}

tasks.withType(Test) {
    systemProperty 'gradleIsRunning', true
}